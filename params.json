{"name":"CSCI 334 Spring 2016","tagline":"Data Mining","body":"# Syllabus\r\n### Course Description\r\nA course covering data mining concepts, methodologies, and programming. Topics include\r\ndecision tables and trees, classification and association rules, clustering, pattern analysis, and linear and statistical\r\nmodeling. Additional topics may include data cleaning and warehousing and techniques for text and web mining.\r\n\r\n### Required Text\r\nMachine Learning: An Algorithmic Perspective by Stephen Marsland (2nd edition). Required. <a href=\"http://www.amazon.com/Machine-Learning-Algorithmic-Perspective-Recognition/dp/1466583282\">Link</a>\r\n\r\n### Prerequisites\r\nCSCI 221, MATH 207, MATH 250\r\n\r\n## Contact Information\r\nProfessor: Dr. Paul Anderson<br>\r\nOffice: 313 Harbor Walk East<br>\r\nOffice Hours: Tuesday and Thursday from 10 - 11:20. AM<br>\r\nOffice Hour Policy: My door is always open. Even if it isn't because of hallway noise, please knock. I love to hear from students. If you would like an appointment, please e-mail me.<br>\r\nE-mail: andersonpe2@cofc.edu<br>\r\nPhone: 843-953-8151\r\n\r\n## Course Times\r\nTuesday and Thursday from 11:20 AM - 12:35 PM in HWEA 301\r\n\r\n## Learning Outcomes\r\n1. Know the meaning of data mining, some of the application areas and disciplines that use data mining, and\r\nunderstand some of the current major challenges in data mining.\r\n2. Recognize that data mining is part of a larger process and be able to describe the various stages of that\r\nprocess.\r\n3. Understand the need for and techniques for carrying out data cleaning and other data pre-processing\r\nactivities and to apply them to real-world data sets.\r\n4. Understand and apply a wide range of the fundamental classification and prediction algorithms, including\r\nalgorithms for decision trees and rule-based classifiers, Bayes classification methods, and other classification\r\napproaches such as logistic regression, k-nearest neighbor, and neural networks.\r\n5. Examine and apply metrics for classifier performance and selection.\r\n6. Examine and apply metrics for association pattern evaluation.\r\n7. Understand and apply several clustering algorithms including k-means clustering and BIRCH clustering.\r\n8. Examine and apply metrics for cluster evaluation such as clustering tendency, number of clusters, and\r\nclustering quality.\r\n9. Examine and apply metrics for attribute selection.\r\n10. Recognize some of the current data mining trends and research frontiers.\r\n11. Explore the use of data mining techniques on different datasets using software packages.\r\n\r\n## Grading Policy\r\nExams - 60%<br>\r\nHomework - 10%<br>\r\nProgramming Projects - 20%<br>\r\nFinal Project and Presentation - 10%\r\n\r\n## Grading Scale\r\nA: 90-100; B: 80-89; C: 70-79; D: 65-69; F: <65. Plusses and minuses will be used at the\r\ndiscretion of the instructor.\r\n\r\n### Grading Guidelines\r\nSubmitted work requires Analysis, Evaluation, and Creation of ideas, concepts, and\r\nmaterials into various deliverables (e.g., see revised Bloom's Taxonomy\r\n(http://www.nwlink.com/~donclark/hrd/bloom.html) and reference below).\r\n\r\nThe grade of A is for work that involves high-quality achievement in all three Bloom areas.<br>\r\nThe grade of B is for work that involves high-quality achievement in at least two Bloom areas, and mediumlevel\r\nachievement in the other.<br>\r\nThe grade of C is for work that involves high-quality achievement in at least one Bloom area, and mediumlevel\r\nachievement in the others.<br>\r\nThe grade of F is for work that does not meet above criteria.\r\n\r\nReference: Errol Thompson, Andrew Luxton-Reilly, Jacqueline L. Whalley, Minjie Hu, and Phil Robbins. 2008.\r\nBloom's taxonomy for CS assessment. In Proceedings of the tenth conference on Australasian computing education\r\n- Volume 78 (ACE '08), Simon Hamilton and Margaret Hamilton (Eds.), Vol. 78. Australian Computer Society,\r\nInc., Darlinghurst, Australia, Australia, 155-161.\r\n\r\n### Exam Policy\r\nStudent performance will be accessed through weekly exams. Each exam will cover the material from the previous week. They will last no more than 15 minutes. No makeup exams will be allowed. Your lowest exam grade will be dropped.\r\n\r\n### Homework Policy\r\nHomework will be assigned each week and collected each Thursday before the weekly exam. Homework will be graded pass or fail and are designed to help you study for the exams. For the majority of the classes, the worksheets will double as assigned homework for you to turn in before the following exam.\r\n\r\n### Programming Projects\r\nProgramming projects will be submitted through the Learn2Mine environment. You may use either Python or R to complete the assignments. Usernames and passwords will be supplied, but you may install your own software as well on your local computer.\r\n\r\n### Honor Code\r\nYou must do your work alone (or with your teammates, for group assignments).<br>\r\nYou must identify your sources of material and inspiration. It is a violation of the honor code to present\r\nsomeone else's work or ideas as your own.<br>\r\nIn any course deliverable, you must always identify the person(s) that helped you (directly or indirectly), if\r\nany, and explain their contribution to your work.<br>\r\nAlso see the College of Charleston Student Handbook, especially sections on The Honor Code (p. 11), and\r\nStudent Code of Conduct (p. 12). There is other useful information there.\r\n\r\n### Classroom Policies\r\n* Tuesday will be devoted to introducing new material. It has been shown in numerous studies that even having a laptop open during this type of instruction negatively affects not only your learning but those around you. Because of this, we will have a strict no\r\nlaptop policy open on the desk on Tuesday. I will do my best to record all lectures and post them in a timely fashion.<br>\r\n* You are expected to take good notes during class.\r\n* You are expected to participate in class with questions and invited discussion.\r\n* You are expected to attend all classes. The grade 'WA' will be given for excessive (>= 3) absences. If you\r\nmiss class, you must get an absence memo from the Associate Dean of Students Office\r\n(http://studentaffairs.cofc.edu/general_info/absence/) ; also, you are responsible for announcements made in\r\nclass, assignment due dates, etc.\r\n* In summary, you should contribute positively to the classroom learning experience, and respect your\r\nclassmates right to learn (see College of Charleston Student Handbook (http://studentaffairs.cofc.edu/honorsystem/\r\nstudenthandbook/index.php) , section on Classroom Code of Conduct (p. 58)).\r\n\r\n### Late Policy\r\nNo late days will be allowed without an excuse. This course is an upper level course, and it will move very fast.\r\nFalling behind on assignments will make it difficult to achieve the learning outcomes of this course.\r\n\r\n### Final Exam\r\nApril 28th from 8 - 11 AM. This time will be used for final project presentations.\r\n\r\n## Facebook Group\r\nEveryone must join the Facebook group for class discussions: \r\n<a href=\"https://www.facebook.com/groups/1534410590185173/\">https://www.facebook.com/groups/1534410590185173/</a>\r\n\r\n# Schedule\r\nYou are responsible for coming prepared to class. This includes reading through the material before attending class.\r\nYou will get a lot more out of the lectures and discussions in this manner. It is cliche, but true. Each week will follow a similar pattern. On Tuesday new material will be introduced and discussed. Thursday will start with an exam over the previous week's material. Followed by an interactive exercise. This will sometimes be guided. sometimes in groups, and sometimes individually. The schedule below is tentative and subject to change. You must check it regularly. \r\n\r\n## Week 1\r\n### Tuesday\r\nNo class\r\n\r\n### Thursday\r\n* Introduction to course and syllabus\r\n* Introduction to learning and data mining (if time)\r\n\r\n## Week 2\r\n### Tuesday\r\n* Introduction to Learning (Chapter 1)\r\n<br>\r\n<a href=\"https://www.evernote.com/pub/w100pea/introductiontomlanddatamining\">Prepared Notes</a>\r\n* Preliminaries (Chapter 2)\r\n<br>\r\n<a href=\"https://www.evernote.com/pub/w100pea/somemlanddmbasics\">Prepared Notes</a>\r\n<br>\r\n<a href=\"https://www.dropbox.com/s/sm7wt4odz539cq8/Bayesian%20Classification.ppt?dl=0\">Bayes Classification</a>\r\n\r\n### Thursday\r\n* Exam over syllabus\r\n* Worksheet on Testing Machine Learning Algorithms and Naive Bayes Classifier\r\n<br>\r\n<a href=\"https://www.dropbox.com/s/4ux94cweg4j3yij/01%20Worksheet%20and%20Homework.doc?dl=0\">Worksheet and Homework</a>\r\n\r\n## Week 3\r\n### Tuesday\r\n* Neural Networks and Linear Discriminants (Chapter 3)\r\n<br>\r\n<a href=\"https://www.evernote.com/pub/w100pea/introductiontovectorsandmatrixalgebraforcomputerscientists\">Prepared Notes</a>\r\n\r\n### Thursday\r\n* Exam over Chapter 1 and 2\r\n* Worksheet related to neural networks\r\n<br>\r\n<a href=\"https://www.dropbox.com/s/rvn9ibr1epdk2jz/02%20Worksheet%20and%20Homework.pdf?dl=0\">Worksheet and Homework</a>\r\n\r\n## Week 4\r\n### Tuesday\r\n* Multi-layer Perceptron (Chapter 4)\r\n<br>\r\n<a href=\"https://www.evernote.com/pub/w100pea/multilayerperceptronexample\">Prepared Notes</a>\r\n\r\n### Thursday\r\n* Exam over Chapter 3\r\n* Worksheet related to neural networks\r\n<br>\r\n<a href=\"https://www.dropbox.com/s/aw4x0xdnn96xx6z/03%20Worksheet%20and%20Homework.pdf?dl=0\">Worksheet and Homework</a>\r\n\r\n## Week 5\r\n### Tuesday\r\n### Introduction to Data Science Programming (Python)\r\n```python\r\n%matplotlib inline\r\n```\r\n\r\n# Lists\r\nTake-aways: Great for collecting items. Notice that you can mix types.\r\n\r\n\r\n```python\r\nmylist = [0, 3, 2, 'hi']\r\nmylist[0] = 2\r\nprint mylist[0]\r\n```\r\n\r\n    2\r\n\r\n\r\n## Making a Copy\r\n\r\n\r\n```python\r\nimport copy\r\nclist = copy.deepcopy(mylist) # Necessary if you have nested objects\r\n```\r\n\r\n## Slicing\r\n\r\n\r\n```python\r\nprint mylist[2:4] # Returns elements in index 2 and 3.\r\nprint mylist[0:4:2] # mylist[start:end:step]\r\nprint mylist[:] # Returns the whole list and a shallow copy\r\n```\r\n\r\n    [2, 'hi']\r\n    [2, 2]\r\n    [2, 3, 2, 'hi']\r\n\r\n\r\n## Sorting\r\n\r\n\r\n```python\r\nmylist.sort()\r\nprint mylist\r\n```\r\n\r\n    [2, 2, 3, 'hi']\r\n\r\n\r\n## Other functions\r\n\r\n\r\n```python\r\nmylist.append(3)\r\nprint mylist\r\n```\r\n\r\n    [2, 2, 3, 'hi', 3]\r\n\r\n\r\n\r\n```python\r\nprint mylist.count('hi')\r\nprint mylist.count(3)\r\n```\r\n\r\n    1\r\n    2\r\n\r\n\r\n\r\n```python\r\notherlist = [-1,-2,-3]\r\nmylist.extend(otherlist)\r\nprint mylist\r\n```\r\n\r\n    [2, 2, 3, 'hi', 3, -1, -2, -3]\r\n\r\n\r\n\r\n```python\r\nmylist.index(2)\r\n```\r\n\r\n\r\n\r\n\r\n    0\r\n\r\n\r\n\r\n\r\n```python\r\nmylist.index(-5)\r\n```\r\n\r\n\r\n    ---------------------------------------------------------------------------\r\n\r\n    ValueError                                Traceback (most recent call last)\r\n\r\n    <ipython-input-20-c383587f266d> in <module>()\r\n    ----> 1 mylist.index(-5)\r\n    \r\n\r\n    ValueError: -5 is not in list\r\n\r\n\r\n\r\n```python\r\nmylist.insert(1,'a')\r\n```\r\n\r\n\r\n```python\r\nprint mylist\r\n```\r\n\r\n    [2, 'a', 2, 3, 'hi', 3, -1, -2, -3]\r\n\r\n\r\n\r\n```python\r\nprint mylist.pop(1)\r\n```\r\n\r\n    a\r\n\r\n\r\n\r\n```python\r\nprint mylist.remove('hi')\r\n```\r\n\r\n    None\r\n\r\n\r\n\r\n```python\r\nprint mylist\r\n```\r\n\r\n    [2, 2, 3, 3, -1, -2, -3]\r\n\r\n\r\n\r\n```python\r\nmylist.reverse()\r\nprint mylist\r\n```\r\n\r\n    [-3, -2, -1, 3, 3, 2, 2]\r\n\r\n\r\n\r\n```python\r\nanotherlist = [-3,-2,-1,0,0,-2,2]\r\nmylist == anotherlist\r\n```\r\n\r\n\r\n\r\n\r\n    False\r\n\r\n\r\n\r\n# Tuples\r\nA tuple is an immutable list (read-only, doesn't change). You can reference them in the same way as lists for the most part.\r\n\r\n\r\n```python\r\nmytuple = (0, 3, 2, 'h')\r\nprint mytuple[1]\r\n```\r\n\r\n    3\r\n\r\n\r\n\r\n```python\r\nmytuple[1] = 4\r\n```\r\n\r\n\r\n    ---------------------------------------------------------------------------\r\n\r\n    TypeError                                 Traceback (most recent call last)\r\n\r\n    <ipython-input-29-6b61a51d3ea0> in <module>()\r\n    ----> 1 mytuple[1] = 4\r\n    \r\n\r\n    TypeError: 'tuple' object does not support item assignment\r\n\r\n\r\n# Dictionaries\r\nA dictionary is a key-value data structure that allows you to reference each element by a key.\r\n\r\n\r\n```python\r\nmonths = {'Jan': 31, 'Feb': 28, 'Mar': 31}\r\nprint months['Jan']\r\n```\r\n\r\n    31\r\n\r\n\r\n\r\n```python\r\nprint months.keys()\r\n```\r\n\r\n    ['Jan', 'Mar', 'Feb']\r\n\r\n\r\n\r\n```python\r\nprint months.items()\r\n```\r\n\r\n    [('Jan', 31), ('Mar', 31), ('Feb', 28)]\r\n\r\n\r\n\r\n```python\r\nfor key in months:\r\n    print key\r\n```\r\n\r\n    Jan\r\n    Mar\r\n    Feb\r\n\r\n\r\n\r\n```python\r\nfor (key,value) in months.items():\r\n    print key,value\r\n```\r\n\r\n    Jan 31\r\n    Mar 31\r\n    Feb 28\r\n\r\n\r\n# A quick comparison to R and MATLAB\r\n- Indexing starts at 0.\r\n- All three are scripting languages.\r\n- R and Python are open source and freely available languages.\r\n- All three have a great set of available add-on packages.\r\n\r\n# Writing and Importing Code\r\nTwo ways to import code\r\n- import name\r\n- from name import *\r\n\r\n\r\n```python\r\nimport sys\r\nsys.path.append('mypath') # Appends mypath to the system path.\r\n```\r\n\r\n# Control Flow\r\n\r\n\r\n```python\r\na = 2\r\nif a == 1:\r\n    print 1\r\nelif a == 2:\r\n    print 2\r\nelse:\r\n    print 'otherwise'\r\n```\r\n\r\n    2\r\n\r\n\r\n\r\n```python\r\nfor key in months:\r\n    print key\r\n```\r\n\r\n    Jan\r\n    Mar\r\n    Feb\r\n\r\n\r\n\r\n```python\r\ni = 0\r\nwhile i < len(mylist):\r\n    print mylist[i]\r\n    i = i + 1\r\n```\r\n\r\n    -3\r\n    -2\r\n    -1\r\n    3\r\n    3\r\n    2\r\n    2\r\n\r\n\r\n# Functions\r\n\r\n\r\n```python\r\ndef pythagoras(x,y):\r\n    \"\"\" Computes the hypotenuse of two arguments\"\"\"\r\n    h = pow(x**2+y**2,0.5)\r\n    return h\r\nprint pythagoras(3,4)\r\n```\r\n\r\n    5.0\r\n\r\n\r\n# Map and Lambda\r\n- If you want to apply the same function to a list of items, use Map\r\n- If you want to create an anonymous and temporary function, use Lambda\r\n\r\n\r\n```python\r\nalist = [2,3,4]\r\nmap(lambda x:pow(x,3) + 7,alist)\r\n```\r\n\r\n\r\n\r\n\r\n    [15, 34, 71]\r\n\r\n\r\n\r\n\r\n```python\r\nfilter(lambda x:x > 2,alist)\r\n```\r\n\r\n\r\n\r\n\r\n    [3, 4]\r\n\r\n\r\n\r\n# Exceptions\r\n\r\n\r\n```python\r\nx = 1\r\ny = 'a'\r\ntry:\r\n    x/y\r\nexcept ZeroDivisionError:\r\n    print \"Divisor must not be 0\"\r\nexcept TypeError:\r\n    print \"They must be numbers\"\r\nexcept:\r\n    print \"Something unspecified went wrong\"\r\nelse:\r\n    print \"Everything worked!\"\r\n```\r\n\r\n    They must be numbers\r\n\r\n\r\n\r\n```python\r\nx = 1\r\ny = 0\r\ntry:\r\n    x/y\r\nexcept ZeroDivisionError:\r\n    print \"Divisor must not be 0\"\r\nexcept TypeError:\r\n    print \"They must be numbers\"\r\nexcept:\r\n    print \"Something unspecified went wrong\"\r\nelse:\r\n    print \"Everything worked!\"\r\n```\r\n\r\n    Divisor must not be 0\r\n\r\n\r\n# Classes\r\n\r\n\r\n```python\r\nclass CofC:\r\n    def __init__(self,bestDept):\r\n        self.bestDept = bestDept\r\n    \r\n    def whatIsTheBestDepartment(self):\r\n        return self.bestDept\r\n```\r\n\r\n\r\n```python\r\nuniv = CofC('Computer Science')\r\nprint univ.whatIsTheBestDepartment()\r\n```\r\n\r\n    Computer Science\r\n\r\n\r\n# Using NumPy and Matplotlib\r\n- Python isn't really good at numerical processing by default.\r\n- That is why we use other packages.\r\n\r\n\r\n```python\r\nimport numpy as np\r\n```\r\n\r\n## NumPy Arrays\r\n\r\n\r\n```python\r\nmyarray = np.array([4,3,2])\r\nmybigarray = np.array([[3,2,4],[3,3,2],[4,5,2]])\r\n```\r\n\r\n\r\n```python\r\nprint myarray\r\n```\r\n\r\n    [4 3 2]\r\n\r\n\r\n\r\n```python\r\nprint mybigarray\r\n```\r\n\r\n    [[3 2 4]\r\n     [3 3 2]\r\n     [4 5 2]]\r\n\r\n\r\nmybigarray is an example of how we will create matrices\r\n## Creation Functions\r\n\r\n\r\n```python\r\nnp.arange(5)\r\n```\r\n\r\n\r\n\r\n\r\n    array([0, 1, 2, 3, 4])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.arange(3,7,2) # start, stop, step\r\n```\r\n\r\n\r\n\r\n\r\n    array([3, 5])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.ones((3,4))\r\n```\r\n\r\n\r\n\r\n\r\n    array([[ 1.,  1.,  1.,  1.],\r\n           [ 1.,  1.,  1.,  1.],\r\n           [ 1.,  1.,  1.,  1.]])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.zeros((3,4))\r\n```\r\n\r\n\r\n\r\n\r\n    array([[ 0.,  0.,  0.,  0.],\r\n           [ 0.,  0.,  0.,  0.],\r\n           [ 0.,  0.,  0.,  0.]])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.eye(3)\r\n```\r\n\r\n\r\n\r\n\r\n    array([[ 1.,  0.,  0.],\r\n           [ 0.,  1.,  0.],\r\n           [ 0.,  0.,  1.]])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.linspace(3,7,3)\r\n```\r\n\r\n\r\n\r\n\r\n    array([ 3.,  5.,  7.])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.linspace(3,7,5)\r\n```\r\n\r\n\r\n\r\n\r\n    array([ 3.,  4.,  5.,  6.,  7.])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.linspace(3,7,6)\r\n```\r\n\r\n\r\n\r\n\r\n    array([ 3. ,  3.8,  4.6,  5.4,  6.2,  7. ])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.r_[1:4,0,4] # Row concatenation\r\n```\r\n\r\n\r\n\r\n\r\n    array([1, 2, 3, 0, 4])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.c_[np.arange(3),np.arange(3)] # Column concatenation\r\n```\r\n\r\n\r\n\r\n\r\n    array([[0, 0],\r\n           [1, 1],\r\n           [2, 2]])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.size(np.eye(3))\r\n```\r\n\r\n\r\n\r\n\r\n    9\r\n\r\n\r\n\r\n\r\n```python\r\nnp.shape(np.eye(3))\r\n```\r\n\r\n\r\n\r\n\r\n    (3, 3)\r\n\r\n\r\n\r\n\r\n```python\r\nprint np.arange(6)\r\nprint np.arange(6).reshape(3,2)\r\n```\r\n\r\n    [0 1 2 3 4 5]\r\n    [[0 1]\r\n     [2 3]\r\n     [4 5]]\r\n\r\n\r\n\r\n```python\r\nnp.ravel(np.eye(3))\r\n```\r\n\r\n\r\n\r\n\r\n    array([ 1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  1.])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.arange(6)[::-1] # Reverse the order\r\n```\r\n\r\n\r\n\r\n\r\n    array([5, 4, 3, 2, 1, 0])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.min(np.arange(6))\r\n```\r\n\r\n\r\n\r\n\r\n    0\r\n\r\n\r\n\r\n\r\n```python\r\nnp.max(np.arange(6))\r\n```\r\n\r\n\r\n\r\n\r\n    5\r\n\r\n\r\n\r\n\r\n```python\r\nnp.copy(np.arange(6))\r\n```\r\n\r\n\r\n\r\n\r\n    array([0, 1, 2, 3, 4, 5])\r\n\r\n\r\n\r\n## Operations on arrays\r\n\r\n\r\n```python\r\na=np.arange(6).reshape(2,3)\r\nb=np.ones((2,3))\r\nprint a\r\nprint b\r\n```\r\n\r\n    [[0 1 2]\r\n     [3 4 5]]\r\n    [[ 1.  1.  1.]\r\n     [ 1.  1.  1.]]\r\n\r\n\r\n\r\n```python\r\na+b\r\n```\r\n\r\n\r\n\r\n\r\n    array([[ 1.,  2.,  3.],\r\n           [ 4.,  5.,  6.]])\r\n\r\n\r\n\r\n\r\n```python\r\na*(b+1) # Element wise operations!\r\n```\r\n\r\n\r\n\r\n\r\n    array([[  0.,   2.,   4.],\r\n           [  6.,   8.,  10.]])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.dot(a,b) # Matrix multiplication, but the dimensions don't agree!\r\n```\r\n\r\n\r\n    ---------------------------------------------------------------------------\r\n\r\n    ValueError                                Traceback (most recent call last)\r\n\r\n    <ipython-input-71-c8af594e789d> in <module>()\r\n    ----> 1 np.dot(a,b) # Matrix multiplication, but the dimensions don't agree!\r\n    \r\n\r\n    ValueError: shapes (2,3) and (2,3) not aligned: 3 (dim 1) != 2 (dim 0)\r\n\r\n\r\n\r\n```python\r\nnp.dot(np.transpose(a),b)\r\n```\r\n\r\n\r\n```python\r\nnp.dot(a,np.transpose(b))\r\n```\r\n\r\n\r\n```python\r\npow(a,2)\r\n```\r\n\r\n## Random Numbers\r\n\r\n\r\n```python\r\nnp.random.rand(3,2) # uniformly distributed random numbers between 0 and 1\r\n```\r\n\r\n\r\n```python\r\nnp.random.randn(3,2) # normally distributed\r\n```\r\n\r\n\r\n```python\r\nnp.random.normal(1,2,(3,2)) # with mean of 1 and standard deviation of 2\r\n```\r\n\r\n\r\n```python\r\nnp.random.uniform(-1,3,(3,2)) # random uniform numbers between -1 and 3\r\n```\r\n\r\n\r\n```python\r\nnp.random.randint(1,10,(3,2)) # random integers between 1 and 10\r\n```\r\n\r\n# Plotting with MATPLOTLIB and PyLab\r\n\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# fake up some data\r\nspread = np.random.rand(50) * 100\r\ncenter = np.ones(25) * 50\r\nflier_high = np.random.rand(10) * 100 + 100\r\nflier_low = np.random.rand(10) * -100\r\ndata = np.concatenate((spread, center, flier_high, flier_low), 0)\r\n```\r\n\r\n\r\n```python\r\n# basic plot\r\nplt.boxplot(data);\r\n\r\n# notched plot\r\nplt.figure()\r\nplt.boxplot(data, 1);\r\n```\r\n\r\n\r\n```python\r\n# change outlier point symbols\r\nplt.figure()\r\nplt.boxplot(data, 0, 'gD');\r\n```\r\n\r\n\r\n![png](output_91_0.png)\r\n\r\n\r\n\r\n```python\r\n# don't show outlier points\r\nplt.figure()\r\nplt.boxplot(data, 0, '');\r\n\r\n# horizontal boxes\r\nplt.figure()\r\nplt.boxplot(data, 0, 'rs', 0);\r\n\r\n# change whisker length\r\nplt.figure()\r\nplt.boxplot(data, 0, 'rs', 0, 0.75);\r\n\r\n# fake up some more data\r\nspread = np.random.rand(50) * 100\r\ncenter = np.ones(25) * 40\r\nflier_high = np.random.rand(10) * 100 + 100\r\nflier_low = np.random.rand(10) * -100\r\nd2 = np.concatenate((spread, center, flier_high, flier_low), 0)\r\ndata.shape = (-1, 1)\r\nd2.shape = (-1, 1)\r\n# data = concatenate( (data, d2), 1 )\r\n# Making a 2-D array only works if all the columns are the\r\n# same length.  If they are not, then use a list instead.\r\n# This is actually more efficient because boxplot converts\r\n# a 2-D array into a list of vectors internally anyway.\r\ndata = [data, d2, d2[::2, 0]]\r\n# multiple box plots on one figure\r\nplt.figure()\r\nplt.boxplot(data);\r\n```\r\n\r\n\r\n    ---------------------------------------------------------------------------\r\n\r\n    AttributeError                            Traceback (most recent call last)\r\n\r\n    <ipython-input-73-9744903c53b9> in <module>()\r\n         17 flier_low = np.random.rand(10) * -100\r\n         18 d2 = np.concatenate((spread, center, flier_high, flier_low), 0)\r\n    ---> 19 data.shape = (-1, 1)\r\n         20 d2.shape = (-1, 1)\r\n         21 # data = concatenate( (data, d2), 1 )\r\n\r\n\r\n    AttributeError: 'list' object has no attribute 'shape'\r\n\r\n\r\n\r\n![png](output_92_1.png)\r\n\r\n\r\n\r\n![png](output_92_2.png)\r\n\r\n\r\n\r\n![png](output_92_3.png)\r\n\r\n\r\n### Some notes on plots and this notebook\r\n- The line at the top of this notebook is necessary to turn on inline plotting.\r\n- The ; that are added on the end of the plots hide object output that is also echoed.\r\n- For more examples, http://matplotlib.org/1.5.1/examples/index.html\r\n\r\n### Thursday\r\n* Exam over Chapter 4\r\n* Introduction to and lab day on programming project\r\n\r\n## Week 6\r\n### Tuesday\r\n* Dimensionality reduction (Chapter 6)\r\n\r\n### Thursday\r\n* Worksheet on dimensionality reduction\r\n\r\n## Week 7\r\n### Tuesday\r\n* Support Vector Machines (Chapter 8)\r\n\r\n### Thursday\r\n* Exam over dimensionality reduction (Chapter 6)\r\n* Worksheet on SVMs\r\n\r\n## Week 8\r\n### Tuesday\r\n* Optimization and search (Chapter 9)\r\n\r\n### Thursday\r\n* Exam over SVMs (Chapter 8)\r\n* Worksheet on optimization and search\r\n\r\n## Week 9\r\n### Tuesday\r\n* Introduction to programming project 2\r\n\r\n### Thursday\r\n* Exam on optimization and search (Chapter 9)\r\n* Lab day for programming project\r\n\r\n## Week 10\r\nSpring break\r\n\r\n## Week 11\r\n### Tuesday\r\n* Evolutionary Learning (Chapter 10)\r\n\r\n### Thursday\r\n* Worksheet on Evolutionary Learning\r\n\r\n## Week 12\r\n### Tuesday\r\n* Introduction to programming project 3\r\n\r\n### Thursday\r\n* Exam over Evolutionary Learning (Chapter 10)\r\n\r\n## Week 13\r\n### Tuesday\r\n* Learning with Trees (Chapter 12)\r\n\r\n### Thursday\r\n* Exam on Reinforcement Learning\r\n* Worksheet on learning with trees\r\n\r\n## Week 14\r\n### Tuesday\r\n* Decision by Committee (Chapter 13)\r\n\r\n### Thursday\r\n* Exam over learning with trees\r\n* Worksheet on decision by committee (Chapter 13)\r\n\r\n## Week 15\r\n### Tuesday\r\n* Unsupervised Learning and Final Project Assignment\r\n\r\n### Thursday\r\n* Exam over decision by committee\r\n* Lab day for final project\r\n\r\n## Week 16\r\n### Tuesday\r\n* Lab day for final project\r\n\r\n### Thursday (this has been moved to the final exam time)\r\n* Exam over unsupervised learning\r\n* Lab day for final project","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}